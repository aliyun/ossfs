# ossfs: Sample ahbe_conf parameter file.
#
# This file is configuration file for additional header by extension(ahbe).
# ossfs loads this file at starting.
#
# Format:
#  line                = [file suffix or regex] HTTP-header [HTTP-header-values]
#  file suffix         = file(object) suffix, if this field is empty, 
#                        it means "reg:(.*)".(=all object).
#  regex               = regular expression to match the file(object) path.
#                        this type starts with "reg:" prefix.
#  HTTP-header         = additional HTTP header name
#  HTTP-header-values  = additional HTTP header value
#
#   <suffix(extension)>  <HTTP header>  <HTTP header values>
#
# Verification is done in the order in which they are described in the file.
# That order is very important.
#
# Example:
#   "                   Content-Encoding gzip"  --> all object
#   ".gz                Content-Encoding gzip"  --> only ".gz" extension file
#   "reg:^/DIR/(.*).t2$ Content-Encoding text2" --> "/DIR/*.t2" extension file
#
# Notice:
#   If you need to set all object, you can specify without "suffix" or regex
#   type "reg:(.*)". Then all of object(file) is added additional header.
#   If you have this configuration file for Content-Encoding, you should
#   know about RFC 2616.
#
#     "The default (identity) encoding; the use of no transformation
#      whatsoever. This content-coding is used only in the Accept-
#      Encoding header, and SHOULD NOT be used in the Content-Encoding
#      header."
#

# file suffix type
.gz			Content-Encoding	gzip
.Z			Content-Encoding	compress
.bz2			Content-Encoding	bzip2
.svgz			Content-Encoding	gzip
.svg.gz			Content-Encoding	gzip
.tgz			Content-Encoding	gzip
.tar.gz			Content-Encoding	gzip
.taz			Content-Encoding	gzip
.tz			Content-Encoding	gzip
.tbz2			Content-Encoding	gzip
gz.js			Content-Encoding	gzip

# regex type(test)
reg:^/MYDIR/(.*)[.]t2$	Content-Encoding	text2

